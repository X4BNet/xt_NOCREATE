diff -Nur --show-c-function linux-4.9.2/include/uapi/linux/netfilter/nf_conntrack_common.h linux-4.9.2-nocreate/include/uapi/linux/netfilter/nf_conntrack_common.h
--- linux-4.9.2/include/uapi/linux/netfilter/nf_conntrack_common.h	2017-01-09 02:32:38.000000000 -0500
+++ linux-4.9.2-nocreate/include/uapi/linux/netfilter/nf_conntrack_common.h	2017-01-17 23:58:00.772000000 -0500
@@ -97,6 +97,10 @@ enum ip_conntrack_status {
 	/* Conntrack got a helper explicitly attached via CT target. */
 	IPS_HELPER_BIT = 13,
 	IPS_HELPER = (1 << IPS_HELPER_BIT),
+
+        /* Conntrack CONDNOTRACK */
+        IPS_NOCREATE_BIT = 15,
+        IPS_NOCREATE = (1 << IPS_NOCREATE_BIT),
 };
 
 /* Connection tracking event types */
diff -Nur --show-c-function linux-4.9.2/net/netfilter/nf_conntrack_core.c linux-4.9.2-nocreate/net/netfilter/nf_conntrack_core.c
--- linux-4.9.2/net/netfilter/nf_conntrack_core.c	2017-01-09 02:32:38.000000000 -0500
+++ linux-4.9.2-nocreate/net/netfilter/nf_conntrack_core.c	2017-01-17 23:59:50.864000000 -0500
@@ -1251,6 +1251,10 @@ resolve_normal_ct(struct net *net, struc
 	hash = hash_conntrack_raw(&tuple, net);
 	h = __nf_conntrack_find_get(net, zone, &tuple, hash);
 	if (!h) {
+                if(tmpl && test_bit(IPS_NOCREATE_BIT, &tmpl->status)){
+                        *ctinfo = IP_CT_NEW;
+                        return NULL;
+                }
 		h = init_conntrack(net, tmpl, &tuple, l3proto, l4proto,
 				   skb, dataoff, hash);
 		if (!h)
@@ -1289,7 +1293,7 @@ nf_conntrack_in(struct net *net, u_int8_
 		struct sk_buff *skb)
 {
 	struct nf_conn *ct, *tmpl = NULL;
-	enum ip_conntrack_info ctinfo;
+	enum ip_conntrack_info ctinfo = IP_CT_NUMBER;
 	struct nf_conntrack_l3proto *l3proto;
 	struct nf_conntrack_l4proto *l4proto;
 	unsigned int *timeouts;
@@ -1342,4 +1346,11 @@ nf_conntrack_in(struct net *net, u_int8_
 	ct = resolve_normal_ct(net, tmpl, skb, dataoff, pf, protonum,
 			       l3proto, l4proto, &set_reply, &ctinfo);
 	if (!ct) {
+		if(ctinfo == IP_CT_NEW){
+                        nf_ct_put(tmpl);
+                        skb->nfct = &nf_ct_untracked_get()->ct_general;
+                        skb->nfctinfo = IP_CT_NEW;
+                        nf_conntrack_get(skb->nfct);
+                        return NF_ACCEPT;
+                }
 		/* Not valid part of a connection */
